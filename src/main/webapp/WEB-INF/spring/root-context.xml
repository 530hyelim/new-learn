<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
		root-context.xml
		- 서버 구동과 동시에 web.xml 파일이 실행되면서 로딩되는 문서.
		- 어플리케이션 전역에서 사용할 bean 객체를 등록하는 역할을 한다.
	 -->
	<!-- DB 연결 설정 -->
	<context:property-placeholder location="classpath:driver.properties" />
	
	<!-- 1단계) DB 연결 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${dataSource.driver}" />
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
	</bean>
	
	<!-- 2단계) MyBatis Spring을 활용하여 SqlSessionFactory 생성 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- MyBatis 설정 파일 위치 지정 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:mapper/**/*.xml" />
	</bean>
	
	<!-- 3단계) SqlSessionTemplate을 제공하는 bean 등록 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!-- 
		transactionManager
		- 데이터베이스 트랜잭션 처리를 담당하는 bean 객체
		- jdbc를 통해 커넥션을 얻어온 후, 트랜잭션 시작/커밋/롤백 처리를 담당.
		- @Transactional 어노테이션을 통해 트랜잭션을 선언적으로 처리.
	 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 
		multipartResolver
		- Http 요청 중 파일 업로트 형태(multipart)의 데이터가 전달되는 경우, 이를 처리해주는 bean 객체.
	 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="10000000"></property>
		<property name="maxInMemorySize" value="2000000"></property>
	</bean>
</beans>









